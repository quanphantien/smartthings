"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CapabilitiesEndpoint = exports.CapabilityPresentationOperator = exports.CustomCapabilityStatus = exports.CapabilitySchemaPropertyName = void 0;
const endpoint_1 = require("../endpoint");
const endpoint_client_1 = require("../endpoint-client");
const types_1 = require("../types");
var CapabilitySchemaPropertyName;
(function (CapabilitySchemaPropertyName) {
    CapabilitySchemaPropertyName["VALUE"] = "value";
    CapabilitySchemaPropertyName["UNIT"] = "unit";
    CapabilitySchemaPropertyName["DATA"] = "data";
})(CapabilitySchemaPropertyName || (exports.CapabilitySchemaPropertyName = CapabilitySchemaPropertyName = {}));
var CustomCapabilityStatus;
(function (CustomCapabilityStatus) {
    CustomCapabilityStatus["PROPOSED"] = "proposed";
    CustomCapabilityStatus["LIVE"] = "live";
    CustomCapabilityStatus["DEPRECATED"] = "deprecated";
    CustomCapabilityStatus["DEAD"] = "dead";
})(CustomCapabilityStatus || (exports.CustomCapabilityStatus = CustomCapabilityStatus = {}));
var CapabilityPresentationOperator;
(function (CapabilityPresentationOperator) {
    CapabilityPresentationOperator["CONTAINS"] = "CONTAINS";
    CapabilityPresentationOperator["DOES_NOT_CONTAIN"] = "DOES_NOT_CONTAIN";
    CapabilityPresentationOperator["EQUALS"] = "EQUALS";
    CapabilityPresentationOperator["DOES_NOT_EQUAL"] = "DOES_NOT_EQUAL";
    CapabilityPresentationOperator["GREATER_THAN"] = "GREATER_THAN";
    CapabilityPresentationOperator["GREATER_THAN_OR_EQUALS"] = "GREATER_THAN_OR_EQUALS";
    CapabilityPresentationOperator["LESS_THAN"] = "LESS_THAN";
    CapabilityPresentationOperator["LESS_THAN_OR_EQUALS"] = "LESS_THAN_OR_EQUALS";
})(CapabilityPresentationOperator || (exports.CapabilityPresentationOperator = CapabilityPresentationOperator = {}));
class CapabilitiesEndpoint extends endpoint_1.Endpoint {
    constructor(config) {
        super(new endpoint_client_1.EndpointClient('capabilities', config));
    }
    /**
     * Get a list of custom capabilities for the given namespace.
     */
    async list(namespace) {
        return this.client.getPagedItems(`namespaces/${namespace}`);
    }
    async listNamespaces() {
        return this.client.get('namespaces');
    }
    /**
     * Gets a list of standard capabilities.
     */
    async listStandard() {
        return this.client.getPagedItems();
    }
    async listVersions(capabilityId) {
        return this.client.getPagedItems(capabilityId);
    }
    get(capabilityId, capabilityVersion) {
        return this.client.get(`${capabilityId}/${capabilityVersion}`);
    }
    create(capability, params) {
        return this.client.post(undefined, capability, params);
    }
    update(capabilityId, capabilityVersion, capability) {
        return this.client.put(`${capabilityId}/${capabilityVersion}`, capability);
    }
    async delete(capabilityId, capabilityVersion) {
        await this.client.delete(`${capabilityId}/${capabilityVersion}`);
        return types_1.SuccessStatusValue;
    }
    async getPresentation(capabilityId, capabilityVersion) {
        return this.client.get(`${capabilityId}/${capabilityVersion}/presentation`);
    }
    async createPresentation(capabilityId, capabilityVersion, presentation) {
        return this.client.post(`${capabilityId}/${capabilityVersion}/presentation`, presentation);
    }
    async updatePresentation(capabilityId, capabilityVersion, presentation) {
        return this.client.put(`${capabilityId}/${capabilityVersion}/presentation`, presentation);
    }
    /**
     * Returns a list of the locales supported by the device profile
     * @param capabilityId UUID of the device profile
     * @param capabilityVersion version number of the capability, starting with 1
     */
    listLocales(capabilityId, capabilityVersion) {
        return this.client.getPagedItems(`${capabilityId}/${capabilityVersion}/i18n`);
    }
    /**
     *
     * @param capabilityId ID of the capability
     * @param tag locale tag, e.g. 'en', 'es', or 'ko'
     * @param capabilityVersion version number of the capability, starting with 1
     */
    getTranslations(capabilityId, capabilityVersion, tag) {
        return this.client.get(`${capabilityId}/${capabilityVersion}/i18n/${tag}`);
    }
    /**
     * Create the translations for a capability
     * @param capabilityId ID of the capability
     * @param capabilityVersion version number of the capability, starting with 1
     * @param data translations
     */
    createTranslations(capabilityId, capabilityVersion, data) {
        return this.client.post(`${capabilityId}/${capabilityVersion}/i18n`, data);
    }
    /**
     * Update the translations for a capability
     * @param capabilityId ID of the capability
     * @param capabilityVersion version number of the capability, starting with 1
     * @param data translations
     */
    updateTranslations(capabilityId, capabilityVersion, data) {
        return this.client.put(`${capabilityId}/${capabilityVersion}/i18n/${data.tag}`, data);
    }
    /**
     * Create or update the translations for a capability
     * @param capabilityId ID of the capability
     * @param capabilityVersion version number of the capability, starting with 1
     * @param data translations
     */
    async upsertTranslations(capabilityId, capabilityVersion, data) {
        var _a;
        try {
            return await this.createTranslations(capabilityId, capabilityVersion, data);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }
        catch (error) {
            if ((_a = error.message) === null || _a === void 0 ? void 0 : _a.includes('Localization already exists')) {
                return this.updateTranslations(capabilityId, capabilityVersion, data);
            }
            throw error;
        }
    }
    /**
     * Retrieve the translations for the specified locale
     * @param capabilityId ID of the capability
     * @param capabilityVersion version number of the capability, starting with 1
     * @param tag locale tag, e.g. 'en', 'es', or 'ko'
     */
    deleteTranslations(capabilityId, capabilityVersion, tag) {
        return this.client.delete(`${capabilityId}/${capabilityVersion}/i18n/${tag}`);
    }
}
exports.CapabilitiesEndpoint = CapabilitiesEndpoint;
